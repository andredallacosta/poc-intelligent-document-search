[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "intelligent-document-search"
version = "2.0.0"
description = "Intelligent Document Search API with RAG and conversational AI"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Andre Dalla Costa", email = "andre@example.com"}
]
keywords = ["ai", "rag", "document-search", "fastapi", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database & Storage
    "redis>=5.0.0",
    "chromadb>=0.4.0",
    
    # PostgreSQL & pgvector
    "asyncpg>=0.30.0",
    "sqlalchemy[asyncio]>=2.0.43",
    "alembic>=1.16.5",
    "pgvector>=0.4.1",
    
    # AI & ML
    "openai>=1.3.0",
    "langchain>=0.0.350",
    "langchain-community>=0.0.10",
    "langchain-openai>=0.0.5",
    
    # Document Processing
    "unstructured>=0.11.0",
    "python-docx>=1.1.0",
    "trafilatura>=1.6.0",
    "pypdf>=3.17.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    
    # Async & HTTP
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    
    # Development
    "pre-commit>=3.5.0",
    "python-dotenv>=1.0.0",
]

production = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/andredallacosta/poc-intelligent-document-search"
Repository = "https://github.com/andredallacosta/poc-intelligent-document-search"
Documentation = "https://github.com/andredallacosta/poc-intelligent-document-search/blob/main/README.md"

[project.scripts]
ingest-documents = "scripts.ingest_documents:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["interface*", "domain*", "infrastructure*", "application*", "shared*"]
exclude = ["tests*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["interface", "domain", "infrastructure", "application", "shared"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "langchain.*",
    "unstructured.*",
    "trafilatura.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["interface", "domain", "infrastructure", "application", "shared"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
