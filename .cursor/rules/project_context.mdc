---
alwaysApply: true
---

# Intelligent Document Search API v2.0 - Clean Architecture

## 🎯 PROJECT OVERVIEW

**Production-ready** conversational AI system with RAG (Retrieval-Augmented Generation) using GPT-4o-mini and Clean Architecture principles.

### **Current Status** ✅

- ✅ Clean Architecture with Domain-Driven Design
- ✅ Conversational AI with session management  
- ✅ RAG pipeline: PostgreSQL + pgvector + OpenAI embeddings
- ✅ Multi-tenancy ready (Prefeitura, Usuario entities)
- ✅ FastAPI with dependency injection
- ✅ Docker containerization optimized
- ✅ Rate limiting and monitoring

## 🏗️ CLEAN ARCHITECTURE STRUCTURE

```
📁 intelligent-document-search/
├── 🌐 interface/              # Interface Layer (FastAPI)
│   ├── api/v1/endpoints/      # REST endpoints
│   ├── schemas/               # Pydantic models
│   ├── dependencies/          # DI container
│   └── main.py               # Entry point
│
├── 🎯 application/            # Application Layer (Use Cases)
│   ├── use_cases/            # Business use cases
│   ├── dto/                  # Data Transfer Objects
│   └── interfaces/           # Service contracts
│
├── 💎 domain/                # Domain Layer (Business Logic)
│   ├── entities/             # Core entities
│   ├── value_objects/        # Domain values
│   ├── services/             # Domain services
│   ├── repositories/         # Repository interfaces
│   └── exceptions/           # Domain exceptions
│
├── 🔧 infrastructure/        # Infrastructure Layer
│   ├── repositories/         # Repository implementations
│   ├── external/             # External clients
│   ├── processors/           # Document processing
│   └── config/               # Configuration
│
├── 🛠️ shared/               # Shared utilities
├── 🧪 tests/                # Test organization
├── 📦 storage/               # Data storage
└── 📄 documents/             # Input documents
```

## 🚀 CORE FUNCTIONALITY

### **Main API**

```bash
# Chat with documents
POST /api/v1/chat/ask
{
  "message": "Como escrever um ofício oficial?",
  "session_id": null  # or existing session UUID
}

# System endpoints
GET /              # API info
GET /health        # Health check
GET /docs          # Interactive docs
```

### **Key Components**

- **Entities**: Document, ChatSession, Message, DocumentChunk, Embedding
- **Use Cases**: ChatWithDocumentsUseCase (main conversation flow)
- **Services**: ChatService, SearchService, DocumentService
- **Infrastructure**: PostgresVectorRepository, PostgresSessionRepository, OpenAIClient

## 🔧 TECHNICAL STACK

### **Core Technologies**

- **FastAPI**: Async web framework
- **PostgreSQL + pgvector**: Vector database for embeddings
- **Redis**: Session storage
- **OpenAI**: GPT-4o-mini + text-embedding-3-small
- **Docker**: Containerization with optimized builds

### **Architecture Patterns**

- **Clean Architecture**: Dependency inversion
- **Repository Pattern**: Data access abstraction
- **Dependency Injection**: Testable components
- **Use Case Pattern**: Application service layer

## 🛠️ DEVELOPMENT WORKFLOW

### **Quick Start**

```bash
# Docker (recommended)
docker-compose up -d

# Local development (ALWAYS activate venv first)
source .venv/bin/activate  # MANDATORY STEP
python -m interface.main

# Health check
curl http://localhost:8000/health
```

### **Adding Features**

1. **Domain First**: Define entities and business rules
2. **Use Cases**: Implement application logic
3. **Infrastructure**: Add external integrations
4. **Interface**: Create API endpoints
5. **Tests**: Unit → Integration → E2E

### **Docker Optimization**

- Uses `.dockerignore` for clean builds
- Single `COPY . .` instead of multiple COPYs
- Removed unnecessary PyTorch (sentence-transformers)
- Build time: ~180s (was 300s+)

## 📋 CONFIGURATION

### **Key Environment Variables**

```bash
# Required
OPENAI_API_KEY=your_key_here

# PostgreSQL (required for production)
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres123
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=intelligent_document_search
POSTGRES_SSL_MODE=disable

# Optional (with defaults)
API_HOST=0.0.0.0
API_PORT=8000
REDIS_HOST=localhost
CHUNK_SIZE=500
MAX_MESSAGES_PER_SESSION=100
```

## 🧪 TESTING STRATEGY

```
tests/
├── unit/          # Fast, isolated (domain/application/infrastructure)
├── integration/   # Service integration (api/repositories)
└── e2e/          # Full system tests
```

**Testing Principles**:

- **Domain**: Pure unit tests, no mocks
- **Application**: Mock infrastructure dependencies
- **Infrastructure**: Integration tests with real services
- **API**: End-to-end tests with full stack

## 🚨 DEVELOPMENT RULES

### **CRITICAL PRINCIPLES**

1. **Domain Independence**: Domain layer has NO external dependencies
2. **Dependency Direction**: Always inward (Interface → Application → Domain)
3. **Interface Segregation**: Small, focused interfaces
4. **Single Responsibility**: Each class has one reason to change
5. **Open/Closed**: Open for extension, closed for modification

### **CODE STANDARDS**

- **ALWAYS activate venv first**: `source .venv/bin/activate` before any Python command
- **NEVER comments in code !IMPORTANT** (self-documenting preferred)
- **No automatic README updates** (manual only)
- **No explanations in files** (code should be clear)
- **Generate code only when explicitly requested**
- **Always question requirements** and suggest improvements

### **ENVIRONMENT CONFIGURATION (.env)**

**CRITICAL**: The AI does **NOT** have access to the `.env` file by default.

**Rules for .env management**:

- **NEVER** assume .env values - always ask the user
- **NEVER** try to read/write .env directly
- **ALWAYS** ask user to add/modify/remove environment variables
- **ALWAYS** ask user to confirm current .env values when debugging
- When suggesting .env changes, provide exact variable names and values
- User will manually update .env and confirm changes

**Example interaction**:

```
❌ BAD: "I'll add POSTGRES_SSL_MODE=disable to your .env"
✅ GOOD: "Please add this to your .env: POSTGRES_SSL_MODE=disable"
```

### **TESTING REQUIREMENTS**

- **Domain**: Pure unit tests, no mocks
- **Application**: Mock infrastructure dependencies
- **Infrastructure**: Integration tests with real services
- **API**: End-to-end tests with full stack

---

This represents a **complete evolution** from POC to production-ready system following Clean Architecture and modern Python practices.
